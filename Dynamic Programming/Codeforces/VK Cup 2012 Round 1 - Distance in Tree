#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

int k;
ll ans1 = 0, ans2 = 0;
vector<vector<int>> Graph;
vector<vector<int>> dp;
vector<bool> visited;

void dfs1(int v)
{
  visited[v] = true;
  for (auto vv : Graph[v])
    if (!visited[vv])
    {
      dfs1(vv);
      for (int i = 1; i <= k; ++i)
        dp[v][i] += dp[vv][i - 1];
    }
}

void dfs2(int v)
{
  visited[v] = true;
  ans1 += dp[v][k];
  for (auto vv : Graph[v])
    if (!visited[vv])
    {
      for (int i = 1; i < k; ++i)
        ans2 += (ll)dp[vv][i - 1] * (dp[v][k - i] - dp[vv][k - i - 1]);
      dfs2(vv);
    }
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n >> k;
  Graph.resize(n + 5);
  dp.resize(n + 5, vector<int>(k + 5));
  for (int i = 1; i <= n; ++i)
    dp[i][0] = 1;
  for (int i = 0; i < n - 1; ++i)
  {
    int u, v;
    cin >> u >> v;
    Graph[u].push_back(v);
    Graph[v].push_back(u);
  }
  visited.resize(n + 5);
  dfs1(1);
  visited.clear(), visited.resize(n + 5);
  dfs2(1);
  cout << ans1 + (ans2 >> 1);
}
